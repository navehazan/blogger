{"version":3,"sources":["actions/bloggers.js","reducers/bloggers.js","store/configureStore.js","components/button.js","pages/shareTask.js","pages/logBlogger.js","constants/columns.js","utils/getEmails.js","pages/selectBlogger.js","utils/interestsToString.js","App.js","serviceWorker.js","css/theme.js","index.js"],"names":["addBlogger","createAction","counterReducer","createReducer","state","action","payload","persistConfig","key","storage","rootReducer","combineReducers","bloggers","bloggersReducer","pReducer","persistReducer","store","createStore","applyMiddleware","thunk","persistor","persistStore","MyButton","styled","Button","useStyles","makeStyles","container","display","padding","ShareTask","classes","className","variant","color","component","RouterLink","to","topContainer","flexDirection","alignItems","interestsContainer","title","fieldRoot","width","checkboxLabel","margin","connect","initialState","interests","vpn1","vpn2","vpn3","email","name","useState","setState","handleFieldChange","event","target","value","handleCheckboxChange","checked","TextField","id","onChange","label","FormControlLabel","control","Checkbox","onClick","field","selectedBloggers","map","blogger","index","includes","filter","theme","buttonRoot","backgroundColor","primary","buttonLabel","console","log","bloggersToDisplay","useMemo","editedBloggers","filtered","Object","keys","join","push","interestsToString","sendEmail","a","emails","getEmails","axios","post","options","sorting","search","filtering","columns","data","actions","icon","components","Action","props","tableData","rowData","selectedBlogger","toggleBlogger","root","NavBarButton","App","AppBar","position","Toolbar","path","LogBlogger","SelectBlogger","Boolean","window","location","hostname","match","createMuiTheme","palette","light","main","dark","contrastText","secondary","ReactDOM","render","ThemeProvider","loading","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4084ad5b.chunk.js","sourcesContent":["import { createAction } from \"@reduxjs/toolkit\";\nexport const ADD_BLOGGER = \"add blogger\";\nexport const addBlogger = createAction(ADD_BLOGGER);\n","import { createReducer } from \"@reduxjs/toolkit\";\nimport { ADD_BLOGGER } from \"../actions/bloggers\";\n\nconst counterReducer = createReducer([], {\n  [ADD_BLOGGER]: (state, action) => [...state, action.payload],\n});\nexport default counterReducer;\n","import { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport bloggersReducer from \"../reducers/bloggers\";\n\nconst persistConfig = {\n  key: \"root\",\n  storage: storage,\n};\n\nconst rootReducer = combineReducers({ bloggers: bloggersReducer });\nconst pReducer = persistReducer(persistConfig, rootReducer);\n\nconst store = createStore(pReducer, { bloggers: [] }, applyMiddleware(thunk));\nconst persistor = persistStore(store);\n\nexport default () => ({\n  persistor,\n  store,\n});\n","import { Button } from \"@material-ui/core\";\nimport styled from \"styled-components\";\n\nconst MyButton = styled(Button)`\n  text-decoration: none;\n  margin: 10px;\n`;\n\nexport default MyButton;\n","import React from \"react\";\nimport  Button  from \"../components/button\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n  container:{\n    display: \"flex\",\n    padding: \"20px\"\n  }\n})\n\nconst ShareTask = () => {\n  const classes = useStyles()\n  return (\n    <div className={classes.container}>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        component={RouterLink}\n        to=\"/select-blogger\"\n      >\n        Share Task\n      </Button>\n    </div>\n  );\n};\n\nexport default ShareTask;\n","import React, { useState } from \"react\";\nimport { TextField, makeStyles } from \"@material-ui/core\";\nimport { connect } from \"react-redux\";\nimport { FormControlLabel, Checkbox } from \"@material-ui/core\";\nimport { addBlogger } from \"../actions/bloggers\";\nimport Button from \"../components/button\";\n\nconst useStyles = makeStyles({\n  topContainer: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    padding: \"20px\",\n  },\n  interestsContainer: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    padding: \"20px\",\n  },\n  title: {\n    color: \"gray\",\n  },\n  fieldRoot: {\n    width: \"300px\",\n  },\n  checkboxLabel: {\n    width: \"300px\",\n    margin: \"0px\",\n  },\n});\n\nconst LogBlogger = ({ addBlogger }) => {\n  const initialState = {\n    interests: {\n      vpn1: false,\n      vpn2: false,\n      vpn3: false,\n    },\n    email: \"\",\n    name: \"\",\n  };\n  const classes = useStyles();\n  const [state, setState] = useState(initialState);\n\n  const handleFieldChange = (event) => {\n    const { name, value } = event.target;\n    setState({ ...state, [name]: value });\n  };\n\n  const handleCheckboxChange = (event) => {\n    const { name, checked } = event.target;\n    let interests = { ...state.interests, [name]: checked };\n\n    setState({ ...state, interests });\n  };\n\n  const signUp = () => {\n    addBlogger(state);\n    setState(initialState);\n  };\n\n  return (\n    <div className={classes.topContainer}>\n      <TextField\n        className={classes.fieldRoot}\n        id=\"name\"\n        onChange={handleFieldChange}\n        value={state.name}\n        name=\"name\"\n        label=\"Full name\"\n      />\n      <TextField\n        className={classes.fieldRoot}\n        id=\"email\"\n        value={state.email}\n        onChange={handleFieldChange}\n        name=\"email\"\n        label=\"Email\"\n      />\n      <div className={classes.interestsContainer}>\n        <div className={classes.title}>Pick Your Interests</div>\n        <FormControlLabel\n          className={classes.checkboxLabel}\n          control={\n            <Checkbox\n              checked={state.interests.vpn1}\n              onChange={handleCheckboxChange}\n              name=\"vpn1\"\n              color=\"primary\"\n            />\n          }\n          label=\"Vpn1\"\n        />\n        <FormControlLabel\n          className={classes.checkboxLabel}\n          control={\n            <Checkbox\n              checked={state.interests.vpn2}\n              onChange={handleCheckboxChange}\n              name=\"vpn2\"\n              color=\"primary\"\n            />\n          }\n          label=\"Vpn2\"\n        />\n        <FormControlLabel\n          className={classes.checkboxLabel}\n          control={\n            <Checkbox\n              checked={state.interests.vpn3}\n              onChange={handleCheckboxChange}\n              name=\"vpn3\"\n              color=\"primary\"\n            />\n          }\n          label=\"Vpn3\"\n        />\n      </div>\n\n      <Button onClick={signUp} variant=\"contained\" color=\"primary\">\n        Sign Up\n      </Button>\n    </div>\n  );\n};\n\nexport default connect(null, { addBlogger })(LogBlogger);\n","export default [\n  { title: \"Name\", field: \"name\" },\n  { title: \"Email\", field: \"email\" },\n  { title: \"Interests\", field: \"interests\" },\n];\n","export default (selectedBloggers, bloggers) => {\n  return bloggers\n    .map((blogger, index) => {\n      if (selectedBloggers.includes(index)) {\n        return blogger.email;\n      } else {\n        return null;\n      }\n    })\n    .filter((email) => email);\n};\n","import React, { useMemo, useState } from \"react\";\nimport MaterialTable from \"material-table\";\nimport { connect } from \"react-redux\";\nimport columns from \"../constants/columns\";\nimport interestsToString from \"../utils/interestsToString\";\nimport { Checkbox, makeStyles } from \"@material-ui/core\";\nimport Button from \"../components/button\";\nimport axios from \"axios\";\nimport getEmails from \"../utils/getEmails\";\n\nexport const useStyles = makeStyles((theme) => ({\n  container: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    padding: \"10px\",\n    alignItems: \"center\",\n    \"& .MuiPaper-root\": {\n      width: \"100%\",\n    },\n  },\n  buttonRoot: {\n    backgroundColor: theme.primary,\n  },\n  buttonLabel: { color: theme.primary },\n}));\n\nconst SelectBlogger = ({ bloggers }) => {\n  const [state, setState] = useState([]);\n  const classes = useStyles(state);\n  console.log(classes);\n  const bloggersToDisplay = useMemo(() => interestsToString(bloggers), [\n    bloggers,\n  ]);\n\n  const sendEmail = async () => {\n    const emails = getEmails(state, bloggers);\n    try {\n      await axios.post(\"http://localhost:3000/bloggers\", emails);\n      console.log(emails);\n    } catch (e) {\n      console.log(e);\n    }\n    setState([]);\n  };\n\n  const toggleBlogger = (rowData) => {\n    const {\n      tableData: { id },\n    } = rowData;\n    let selectedBloggers = [...state];\n    if (selectedBloggers.includes(id)) {\n      selectedBloggers = selectedBloggers.filter(\n        (selectedBlogger) => selectedBlogger !== id\n      );\n    } else {\n      selectedBloggers.push(id);\n    }\n    setState(selectedBloggers);\n  };\n\n  return (\n    <div className={classes.container}>\n      <MaterialTable\n        title={\"Active Bloggers\"}\n        options={{ sorting: true, search: false, filtering: true }}\n        columns={columns}\n        data={bloggersToDisplay}\n        actions={[\n          {\n            icon: () => null,\n            onClick: () => null,\n          },\n        ]}\n        components={{\n          Action: (props) => {\n            return (\n              <Checkbox\n                checked={state.includes(props.data.tableData.id)}\n                onChange={() => toggleBlogger(props.data)}\n              />\n            );\n          },\n        }}\n      />\n      <Button\n        classes={{\n          root: classes.buttonRoot,\n          label: classes.buttonLabel,\n        }}\n        color=\"primary\"\n        onClick={sendEmail}\n      >\n        Share Task\n      </Button>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  bloggers: state.bloggers,\n});\n\nexport default connect(mapStateToProps)(SelectBlogger);\n","export default (bloggers) => {\n  const editedBloggers = [];\n  for (let blogger of bloggers) {\n    const keys = Object.keys(blogger.interests);\n    const filtered = keys.filter((key) => blogger.interests[key]);\n    blogger = { ...blogger, interests: filtered.join(\",\") };\n    editedBloggers.push(blogger)\n  }\n  return editedBloggers;\n};\n","import React from \"react\";\nimport { AppBar, Toolbar, Button } from \"@material-ui/core\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link as RouterLink,\n} from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nimport ShareTask from \"./pages/shareTask\";\nimport LogBlogger from \"./pages/logBlogger\";\nimport SelectBlogger from \"./pages/selectBlogger\";\n\nfunction App() {\n  return (\n    <Router>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <NavBarButton\n            variant=\"contained\"\n            component={RouterLink}\n            to=\"/log-blogger\"\n          >\n            Log Blogger\n          </NavBarButton>\n          <NavBarButton\n            variant=\"contained\"\n            component={RouterLink}\n            to=\"/share-task\"\n          >\n            Share Task\n          </NavBarButton>\n        </Toolbar>\n      </AppBar>\n\n      <Switch>\n        <Route path=\"/log-blogger\" component={LogBlogger} />\n        <Route path=\"/share-task\" component={ShareTask} />\n        <Route path={\"/select-blogger\"} component={SelectBlogger} />\n      </Switch>\n    </Router>\n  );\n}\n\nconst NavBarButton = styled(Button)`\n  text-decoration: none;\n  margin: 10px;\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createMuiTheme } from \"@material-ui/core/styles\";\n\nexport  default createMuiTheme({\n  palette: {\n    primary: {\n      light: \"#757ce8\",\n      main: \"#3f50b5\",\n      dark: \"#002884\",\n      contrastText: \"#fff\",\n    },\n    secondary: {\n      light: \"#ff7961\",\n      main: \"#f44336\",\n      dark: \"#ba000d\",\n      contrastText: \"#000\",\n    },\n  },\n});\n\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport configureStore from \"./store/configureStore\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport theme from \"./css/theme\";\n\nconst { store, persistor } = configureStore();\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </ThemeProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}